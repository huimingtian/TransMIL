import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
from zzmodels.NystromAttention import NystromAttention
from math import ceil
from torch import nn, einsum
from einops import rearrange, reduce


class TransLayer(nn.Module):

    def __init__(self, norm_layer=nn.LayerNorm, dim=512):
        super().__init__()
        self.norm = norm_layer(dim)
        self.attn = NystromAttention(
            dim=dim,
            dim_head=dim // 8,
            heads=8,
            num_landmarks=dim // 2,  # number of landmarks  地标数量
            pinv_iterations=6,
            # number of moore-penrose iterations for approximating pinverse. 6 was recommended by the paper
            residual=True,
            # whether to do an extra residual with the value or not. supposedly faster convergence if turned on
            dropout=0.1
        )

    def forward(self, x):
        x = x + self.attn(self.norm(x))

        return x


class PPEG(nn.Module):
    def __init__(self, dim=512):
        super(PPEG, self).__init__()
        self.proj = nn.Conv2d(dim, dim, 7, 1, 7 // 2, groups=dim)
        self.proj1 = nn.Conv2d(dim, dim, 5, 1, 5 // 2, groups=dim)
        self.proj2 = nn.Conv2d(dim, dim, 3, 1, 3 // 2, groups=dim)

    def forward(self, x, H, W):
        B, _, C = x.shape  # x torch.Size([1, 6085, 512])
        cls_token, feat_token = x[:, 0], x[:,
                                         1:]  # cls_token torch.Size([1, 512]) feat_token torch.Size([1, 6084, 512])
        cnn_feat = feat_token.transpose(1, 2).view(B, C, H, W)  # cnn_feat torch.Size([1, 512, 78, 78])
        x = self.proj(cnn_feat) + cnn_feat + self.proj1(cnn_feat) + self.proj2(
            cnn_feat)  # x torch.Size([1, 512, 78, 78])
        x = x.flatten(2).transpose(1, 2)  # x torch.Size([1, 6084, 512])
        x = torch.cat((cls_token.unsqueeze(1), x), dim=1)  # x torch.Size([1, 6085, 512])
        return x


class TransMIL_attention(nn.Module):
    def __init__(self, n_classes):
        super(TransMIL_attention, self).__init__()
        self.pos_layer = PPEG(dim=512)
        self._fc1 = nn.Sequential(nn.Linear(1024, 512), nn.ReLU())
        self.cls_token = nn.Parameter(torch.randn(1, 1, 512))
        self.n_classes = n_classes
        self.layer1 = TransLayer(dim=512)
        self.layer2 = TransLayer(dim=512)
        self.layer3 = TransLayer(dim=512)
        self.norm = nn.LayerNorm(512)
        self._fc2 = nn.Linear(512, self.n_classes)

        self.criterion = nn.CrossEntropyLoss()
        self.optimizer = torch.optim.Adam(self.parameters(), lr=5e-5, weight_decay=10e-6)

    def forward(self, x, return_features=False):
        x = x.unsqueeze(0)  # torch.Size([1, 16, 1280])
        h = x.float()  # torch.Size([1, 16, 1280])
        h = self._fc1(h)  # torch.Size([1, 16, 640])

        # ---->pad
        H = h.shape[1]  # n = 16
        _H, _W = int(np.ceil(np.sqrt(H))), int(np.ceil(np.sqrt(H)))
        add_length = _H * _W - H
        h = torch.cat([h, h[:, :add_length, :]], dim=1)  # [B, N, 512]  torch.Size([1, 16, 640])

        # ---->cls_token
        B = h.shape[0]  # 16
        # cls_tokens = self.cls_token.expand(B, -1, -1).cuda()
        cls_tokens = self.cls_token.expand(B, -1, -1)  # (1, 1, 640)
        h = torch.cat((cls_tokens, h), dim=1)  # torch.Size([1, 17, 640])

        # ---->Translayer x1
        h = self.layer1(h)  # [B, N, 512]  torch.Size([1, 17, 640])

        # ---->PPEG
        h = self.pos_layer(h, _H, _W)  # [B, N, 512]  torch.Size([1, 17, 640])

        # ---->Translayer x2
        h = self.layer2(h)  # [B, N, 512]  torch.Size([1, 17, 640])

        # ---->PPEG
        h = self.pos_layer(h, _H, _W)  # [B, N, 512]  torch.Size([1, 17, 640])

        # ---->Translayer x3
        h = self.layer3(h)  # [B, N, 512]  torch.Size([1, 17, 640])
        A_raw = h[:, :, 0]
        # ---->cls_token
        M = self.norm(h)[:, 0]  # torch.Size([1, 640])

        # ---->predict
        logits = self._fc2(M)  # [B, n_classes]  (1, 6)
        # Y_hat = torch.argmax(logits, dim=1)
        Y_hat = torch.topk(logits, 1, dim=1)[1]  # (1, 1)
        Y_prob = F.softmax(logits, dim=1)  # (1, 6)
        # results_dict = {'logits': logits, 'Y_prob': Y_prob, 'Y_hat': Y_hat}
        results_dict = {}
        if return_features:
            results_dict.update({'features': M})

        return logits, Y_prob, Y_hat, A_raw, results_dict, M


if __name__ == "__main__":
    data = torch.randn((6000, 1024))
    model = TransMIL(n_classes=6)
    # print(model.eval())
    results_dict = model(x=data)
    print(results_dict)
